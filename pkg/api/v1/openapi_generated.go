// +build !ignore_autogenerated

/*
Copyright 2018 The KubeVirt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"kubevirt.io/kubevirt/pkg/api/v1.VirtualMachine": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "VirtualMachine is *the* VM Definition. It represents a virtual machine in the runtime environment of kubernetes.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "VM Spec contains the VM specification.",
								Ref:         ref("kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status is the high level overview of how the VM is doing. It contains information available to controllers and users.",
								Ref:         ref("kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineSpec", "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineStatus"},
		},
		"kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "VirtualMachineSpec is a description of a VirtualMachine.",
					Properties: map[string]spec.Schema{
						"domain": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the desired behavior of the VirtualMachine on the host.",
								Ref:         ref("kubevirt.io/kubevirt/pkg/api/v1.DomainSpec"),
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeSelector is a selector which must be true for the vm to fit on a node. Selector which must match a node's labels for the vm to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Description: "If affinity is specifies, obey all the affinity rules",
								Ref:         ref("kubevirt.io/kubevirt/pkg/api/v1.Affinity"),
							},
						},
						"terminationGracePeriodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Grace period observed after signalling a VM to stop after which the VM is force terminated.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"volumes": {
							SchemaProps: spec.SchemaProps{
								Description: "List of volumes that can be mounted by disks belonging to the vm.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("kubevirt.io/kubevirt/pkg/api/v1.Volume"),
										},
									},
								},
							},
						},
					},
					Required: []string{"domain"},
				},
			},
			Dependencies: []string{
				"kubevirt.io/kubevirt/pkg/api/v1.Affinity", "kubevirt.io/kubevirt/pkg/api/v1.DomainSpec", "kubevirt.io/kubevirt/pkg/api/v1.Volume"},
		},
		"kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "VirtualMachineStatus represents information about the status of a VM. Status may trail the actual state of a system.",
					Properties: map[string]spec.Schema{
						"nodeName": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeName is the name where the VM is currently running.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"migrationNodeName": {
							SchemaProps: spec.SchemaProps{
								Description: "MigrationNodeName is the node where the VM is live migrating to.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Description: "Conditions are specific points in VM's pod runtime.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineCondition"),
										},
									},
								},
							},
						},
						"phase": {
							SchemaProps: spec.SchemaProps{
								Description: "Phase is the status of the VM in kubernetes world. It is not the VM status, but partially correlates to it.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineCondition"},
		},
	}
}
