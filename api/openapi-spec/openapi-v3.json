{
  "kubevirt.io/kubevirt/pkg/api/v1.Affinity": {
   "Schema": {
    "description": "Affinity groups all the affinity rules related to a VM",
    "properties": {
     "nodeAffinity": {
      "description": "Node affinity support",
      "$ref": "#/definitions/v1.NodeAffinity"
     }
    }
   },
   "Dependencies": [
    "k8s.io/api/core/v1.NodeAffinity"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.CDRomTarget": {
   "Schema": {
    "properties": {
     "bus": {
      "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, ide",
      "type": "string"
     },
     "readonly": {
      "description": "ReadOnly Defaults to true",
      "type": "boolean"
     },
     "tray": {
      "description": "Tray indicates if the tray of the device is open or closed. Allowed values are \"open\" and \"closed\" Defaults to closed",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.CPU": {
   "Schema": {
    "description": "CPU allow specifying the CPU topology",
    "properties": {
     "cores": {
      "description": "Cores specifies the number of cores inside the vm. Must be a value greater or equal 1.",
      "type": "integer",
      "format": "int64"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.Clock": {
   "Schema": {
    "description": "Represents the clock and timers of a vm",
    "properties": {
     "timezone": {
      "description": "Timezone sets the guest clock to the specified timezone. Zone name follows the TZ environment variable format (e.g. 'America/New_York')",
      "type": "string"
     },
     "utc": {
      "description": "UTC sets the guest clock to UTC on each boot. If an offset is specified, guest changes to the clock will be kept during reboots and are not reset.",
      "$ref": "#/definitions/v1.ClockOffsetUTC"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.ClockOffsetUTC"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.ClockOffset": {
   "Schema": {
    "description": "Exactly one of its members must be set.",
    "properties": {
     "timezone": {
      "description": "Timezone sets the guest clock to the specified timezone. Zone name follows the TZ environment variable format (e.g. 'America/New_York')",
      "type": "string"
     },
     "utc": {
      "description": "UTC sets the guest clock to UTC on each boot. If an offset is specified, guest changes to the clock will be kept during reboots and are not reset.",
      "$ref": "#/definitions/v1.ClockOffsetUTC"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.ClockOffsetUTC"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.ClockOffsetUTC": {
   "Schema": {
    "description": "UTC sets the guest clock to UTC on each boot.",
    "properties": {
     "offsetSeconds": {
      "description": "OffsetSeconds specifies an offset in seconds, relative to UTC. If set, guest changes to the clock will be kept during reboots and not reset.",
      "type": "integer",
      "format": "int32"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.CloudInitNoCloudSource": {
   "Schema": {
    "description": "Represents a cloud-init nocloud user data source More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html",
    "properties": {
     "secretRef": {
      "description": "UserDataSecretRef references a k8s secret that contains NoCloud userdata",
      "$ref": "#/definitions/v1.LocalObjectReference"
     },
     "userData": {
      "description": "UserData contains NoCloud inline cloud-init userdata",
      "type": "string"
     },
     "userDataBase64": {
      "description": "UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string",
      "type": "string"
     }
    }
   },
   "Dependencies": [
    "k8s.io/api/core/v1.LocalObjectReference"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.Devices": {
   "Schema": {
    "properties": {
     "disks": {
      "description": "Disks describes disks, cdroms, floppy and luns which are connected to the vm",
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1.Disk"
      }
     },
     "watchdog": {
      "description": "Watchdog describes a watchdog device which can be added to the vm",
      "$ref": "#/definitions/v1.Watchdog"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.Disk",
    "kubevirt.io/kubevirt/pkg/api/v1.Watchdog"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.Disk": {
   "Schema": {
    "required": [
     "name",
     "volumeName"
    ],
    "properties": {
     "cdrom": {
      "description": "Attach a volume as a cdrom to the vm",
      "$ref": "#/definitions/v1.CDRomTarget"
     },
     "disk": {
      "description": "Attach a volume as a disk to the vm",
      "$ref": "#/definitions/v1.DiskTarget"
     },
     "floppy": {
      "description": "Attach a volume as a floppy to the vm",
      "$ref": "#/definitions/v1.FloppyTarget"
     },
     "lun": {
      "description": "Attach a volume as a LUN to the vm",
      "$ref": "#/definitions/v1.LunTarget"
     },
     "name": {
      "description": "Name is the device name",
      "type": "string"
     },
     "volumeName": {
      "description": "Name of the volume which is referenced Must match the Name of a Volume.",
      "type": "string"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.CDRomTarget",
    "kubevirt.io/kubevirt/pkg/api/v1.DiskTarget",
    "kubevirt.io/kubevirt/pkg/api/v1.FloppyTarget",
    "kubevirt.io/kubevirt/pkg/api/v1.LunTarget"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.DiskDevice": {
   "Schema": {
    "description": "Represents the target of a volume to mount. Only one of its members may be specified.",
    "properties": {
     "cdrom": {
      "description": "Attach a volume as a cdrom to the vm",
      "$ref": "#/definitions/v1.CDRomTarget"
     },
     "disk": {
      "description": "Attach a volume as a disk to the vm",
      "$ref": "#/definitions/v1.DiskTarget"
     },
     "floppy": {
      "description": "Attach a volume as a floppy to the vm",
      "$ref": "#/definitions/v1.FloppyTarget"
     },
     "lun": {
      "description": "Attach a volume as a LUN to the vm",
      "$ref": "#/definitions/v1.LunTarget"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.CDRomTarget",
    "kubevirt.io/kubevirt/pkg/api/v1.DiskTarget",
    "kubevirt.io/kubevirt/pkg/api/v1.FloppyTarget",
    "kubevirt.io/kubevirt/pkg/api/v1.LunTarget"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.DiskTarget": {
   "Schema": {
    "properties": {
     "bus": {
      "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, ide",
      "type": "string"
     },
     "readonly": {
      "description": "ReadOnly Defaults to false",
      "type": "boolean"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.DomainSpec": {
   "Schema": {
    "required": [
     "devices"
    ],
    "properties": {
     "clock": {
      "description": "Clock sets the clock and timers of the vm.",
      "$ref": "#/definitions/v1.Clock"
     },
     "cpu": {
      "description": "CPU allow specified the detailed CPU topology inside the vm.",
      "$ref": "#/definitions/v1.CPU"
     },
     "devices": {
      "description": "Devices allows adding disks, network interfaces, ...",
      "$ref": "#/definitions/v1.Devices"
     },
     "features": {
      "description": "Features like acpi, apic, hyperv",
      "$ref": "#/definitions/v1.Features"
     },
     "firmware": {
      "description": "Firmware",
      "$ref": "#/definitions/v1.Firmware"
     },
     "machine": {
      "description": "Machine type",
      "$ref": "#/definitions/v1.Machine"
     },
     "resources": {
      "description": "Resources describes the Compute Resources required by this vm.",
      "$ref": "#/definitions/v1.ResourceRequirements"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.CPU",
    "kubevirt.io/kubevirt/pkg/api/v1.Clock",
    "kubevirt.io/kubevirt/pkg/api/v1.Devices",
    "kubevirt.io/kubevirt/pkg/api/v1.Features",
    "kubevirt.io/kubevirt/pkg/api/v1.Firmware",
    "kubevirt.io/kubevirt/pkg/api/v1.Machine",
    "kubevirt.io/kubevirt/pkg/api/v1.ResourceRequirements"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.EphemeralVolumeSource": {
   "Schema": {
    "properties": {
     "persistentVolumeClaim": {
      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vm via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
      "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
     }
    }
   },
   "Dependencies": [
    "k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.FeatureAPIC": {
   "Schema": {
    "properties": {
     "enabled": {
      "description": "Enabled determines if the feature should be enabled or disabled on the guest Defaults to true",
      "type": "boolean"
     },
     "endOfInterrupt": {
      "description": "EndOfInterrupt enables the end of interrupt notification in the guest Defaults to false",
      "type": "boolean"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.FeatureHyperv": {
   "Schema": {
    "description": "Hyperv specific features",
    "properties": {
     "relaxed": {
      "description": "Relaxed relaxes constraints on timer Defaults to the machine type setting",
      "$ref": "#/definitions/v1.FeatureState"
     },
     "reset": {
      "description": "Reset enables Hyperv reboot/reset for the vm Defaults to the machine type setting",
      "$ref": "#/definitions/v1.FeatureState"
     },
     "runtime": {
      "description": "Runtime Defaults to the machine type setting",
      "$ref": "#/definitions/v1.FeatureState"
     },
     "spinlocks": {
      "description": "Spinlocks indicates if spinlocks should be made available to the guest",
      "$ref": "#/definitions/v1.FeatureSpinlocks"
     },
     "synic": {
      "description": "SyNIC enable Synthetic Interrupt Controller Defaults to the machine type setting",
      "$ref": "#/definitions/v1.FeatureState"
     },
     "synictimer": {
      "description": "SyNICTimer enable Synthetic Interrupt Controller timer Defaults to the machine type setting",
      "$ref": "#/definitions/v1.FeatureState"
     },
     "vapic": {
      "description": "VAPIC indicates whether virtual APIC is enabled Defaults to the machine type setting",
      "$ref": "#/definitions/v1.FeatureState"
     },
     "vendorid": {
      "description": "VendorID allows setting the hypervisor vendor id Defaults to the machine type setting",
      "$ref": "#/definitions/v1.FeatureVendorID"
     },
     "vpindex": {
      "description": "VPIndex enables the Virtual Processor Index to help windows identifying virtual processors Defaults to the machine type setting",
      "$ref": "#/definitions/v1.FeatureState"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.FeatureSpinlocks",
    "kubevirt.io/kubevirt/pkg/api/v1.FeatureState",
    "kubevirt.io/kubevirt/pkg/api/v1.FeatureVendorID"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.FeatureSpinlocks": {
   "Schema": {
    "properties": {
     "enabled": {
      "description": "Enabled determines if the feature should be enabled or disabled on the guest Defaults to true",
      "type": "boolean"
     },
     "spinlocks": {
      "description": "Retries indicates the number of retries Must be a value greater or equal 4096 Defaults to 4096",
      "type": "integer",
      "format": "int64"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.FeatureState": {
   "Schema": {
    "description": "Represents if a feature is enabled or disabled",
    "properties": {
     "enabled": {
      "description": "Enabled determines if the feature should be enabled or disabled on the guest Defaults to true",
      "type": "boolean"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.FeatureVendorID": {
   "Schema": {
    "properties": {
     "enabled": {
      "description": "Enabled determines if the feature should be enabled or disabled on the guest Defaults to true",
      "type": "boolean"
     },
     "vendorid": {
      "description": "VendorID sets the hypervisor vendor id, visible to the vm String up to twelve characters",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.Features": {
   "Schema": {
    "properties": {
     "acpi": {
      "description": "ACPI enables/disables ACPI insidejsondata guest Defaults to enabled",
      "$ref": "#/definitions/v1.FeatureState"
     },
     "apic": {
      "description": "Defaults to the machine type setting",
      "$ref": "#/definitions/v1.FeatureAPIC"
     },
     "hyperv": {
      "description": "Defaults to the machine type setting",
      "$ref": "#/definitions/v1.FeatureHyperv"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.FeatureAPIC",
    "kubevirt.io/kubevirt/pkg/api/v1.FeatureHyperv",
    "kubevirt.io/kubevirt/pkg/api/v1.FeatureState"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.Firmware": {
   "Schema": {
    "properties": {
     "uuid": {
      "description": "UUID reported by the vm bios Defaults to a random generated uid",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.FloppyTarget": {
   "Schema": {
    "properties": {
     "readonly": {
      "description": "ReadOnly Defaults to false",
      "type": "boolean"
     },
     "tray": {
      "description": "Tray indicates if the tray of the device is open or closed. Allowed values are \"open\" and \"closed\" Defaults to closed",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.HPETTimer": {
   "Schema": {
    "properties": {
     "present": {
      "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true",
      "type": "boolean"
     },
     "tickPolicy": {
      "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest One of \"delay\", \"catchup\", \"merge\", \"discard\"",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.HypervTimer": {
   "Schema": {
    "properties": {
     "present": {
      "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true",
      "type": "boolean"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.I6300ESBWatchdog": {
   "Schema": {
    "description": "i6300esb watchdog device",
    "properties": {
     "action": {
      "description": "The action to take. Valid values are poweroff, reset, shutdown. Defaults to reset",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.KVMTimer": {
   "Schema": {
    "properties": {
     "present": {
      "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true",
      "type": "boolean"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.LunTarget": {
   "Schema": {
    "properties": {
     "bus": {
      "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, ide",
      "type": "string"
     },
     "readonly": {
      "description": "ReadOnly Defaults to false",
      "type": "boolean"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.Machine": {
   "Schema": {
    "required": [
     "type"
    ],
    "properties": {
     "type": {
      "description": "QEMU machine type is the actual chipset of the VM.",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.OfflineVirtualMachine": {
   "Schema": {
    "description": "OfflineVirtualMachine handles the VirtualMachines that are not running or are in a stopped state The OfflineVirtualMachine contains the template to create the VirtualMachine. It also mirrors the running state of the created VirtualMachine in its status.",
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "$ref": "#/definitions/v1.ObjectMeta"
     },
     "spec": {
      "description": "Spec contains the specification of VirtualMachine created",
      "$ref": "#/definitions/v1.OfflineVirtualMachineSpec"
     },
     "status": {
      "description": "Status holds the current state of the controller and brief information about its associated VirtualMachine",
      "$ref": "#/definitions/v1.OfflineVirtualMachineStatus"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta",
    "kubevirt.io/kubevirt/pkg/api/v1.OfflineVirtualMachineSpec",
    "kubevirt.io/kubevirt/pkg/api/v1.OfflineVirtualMachineStatus"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.OfflineVirtualMachineCondition": {
   "Schema": {
    "description": "OfflineVirtualMachineCondition represents the state of OfflineVirtualMachine",
    "required": [
     "type",
     "status"
    ],
    "properties": {
     "lastProbeTime": {
      "$ref": "#/definitions/v1.Time"
     },
     "lastTransitionTime": {
      "$ref": "#/definitions/v1.Time"
     },
     "message": {
      "type": "string"
     },
     "reason": {
      "type": "string"
     },
     "status": {
      "type": "string"
     },
     "type": {
      "type": "string"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.Time"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.OfflineVirtualMachineList": {
   "Schema": {
    "description": "OfflineVirtualMachineList is a list of offlinevirtualmachines",
    "required": [
     "metadata",
     "items"
    ],
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "items": {
      "description": "Items is a list of OfflineVirtualMachines",
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1.OfflineVirtualMachine"
      }
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "$ref": "#/definitions/v1.ListMeta"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta",
    "kubevirt.io/kubevirt/pkg/api/v1.OfflineVirtualMachine"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.OfflineVirtualMachineSpec": {
   "Schema": {
    "description": "OfflineVirtualMachineSpec describes how the proper OfflineVirtualMachine should look like",
    "required": [
     "running",
     "template"
    ],
    "properties": {
     "running": {
      "description": "Running controlls whether the associatied VirtualMachine is created or not",
      "type": "boolean"
     },
     "template": {
      "description": "Template is the direct specification of VirtualMachine",
      "$ref": "#/definitions/v1.VMTemplateSpec"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.VMTemplateSpec"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.OfflineVirtualMachineStatus": {
   "Schema": {
    "description": "OfflineVirtualMachineStatus represents the status returned by the controller to describe how the OfflineVirtualMachine is doing",
    "properties": {
     "conditions": {
      "description": "Hold the state information of the OfflineVirtualMachine and its VirtualMachine",
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1.OfflineVirtualMachineCondition"
      }
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.OfflineVirtualMachineCondition"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.PITTimer": {
   "Schema": {
    "properties": {
     "present": {
      "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true",
      "type": "boolean"
     },
     "tickPolicy": {
      "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest One of \"delay\", \"catchup\", \"discard\"",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.RTCTimer": {
   "Schema": {
    "properties": {
     "present": {
      "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true",
      "type": "boolean"
     },
     "tickPolicy": {
      "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest One of \"delay\", \"catchup\"",
      "type": "string"
     },
     "track": {
      "description": "Track the guest or the wall clock",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.RegistryDiskSource": {
   "Schema": {
    "description": "Represents a docker image with an embedded disk",
    "required": [
     "image"
    ],
    "properties": {
     "image": {
      "description": "Image is the name of the image with the embedded disk",
      "type": "string"
     },
     "imagePullSecret": {
      "description": "ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.ResourceRequirements": {
   "Schema": {
    "properties": {
     "limits": {
      "description": "Limits describes the maximum amount of compute resources allowed. Valid resource keys are \"memory\" and \"cpu\".",
      "type": "object",
      "additionalProperties": {
       "$ref": "#/definitions/resource.Quantity"
      }
     },
     "requests": {
      "description": "Requests is a description of the initial vm resources. Valid resource keys are \"memory\" and \"cpu\".",
      "type": "object",
      "additionalProperties": {
       "$ref": "#/definitions/resource.Quantity"
      }
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/api/resource.Quantity"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.Spice": {
   "Schema": {
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "info": {
      "$ref": "#/definitions/v1.SpiceInfo"
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "$ref": "#/definitions/v1.ObjectMeta"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta",
    "kubevirt.io/kubevirt/pkg/api/v1.SpiceInfo"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.SpiceInfo": {
   "Schema": {
    "required": [
     "type",
     "host",
     "port"
    ],
    "properties": {
     "host": {
      "type": "string"
     },
     "port": {
      "type": "integer",
      "format": "int32"
     },
     "proxy": {
      "type": "string"
     },
     "type": {
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.Timer": {
   "Schema": {
    "description": "Represents all available timers in a vm",
    "properties": {
     "hpet": {
      "description": "HPET (High Precision Event Timer) - multiple timers with periodic interrupts.",
      "$ref": "#/definitions/v1.HPETTimer"
     },
     "hyperv": {
      "description": "Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests.",
      "$ref": "#/definitions/v1.HypervTimer"
     },
     "kvm": {
      "description": "KVM \t(KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests.",
      "$ref": "#/definitions/v1.KVMTimer"
     },
     "pit": {
      "description": "PIT (Programmable Interval Timer) - a timer with periodic interrupts.",
      "$ref": "#/definitions/v1.PITTimer"
     },
     "rtc": {
      "description": "RTC (Real Time Clock) - a continuously running timer with periodic interrupts.",
      "$ref": "#/definitions/v1.RTCTimer"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.HPETTimer",
    "kubevirt.io/kubevirt/pkg/api/v1.HypervTimer",
    "kubevirt.io/kubevirt/pkg/api/v1.KVMTimer",
    "kubevirt.io/kubevirt/pkg/api/v1.PITTimer",
    "kubevirt.io/kubevirt/pkg/api/v1.RTCTimer"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VMReplicaSetCondition": {
   "Schema": {
    "required": [
     "type",
     "status"
    ],
    "properties": {
     "lastProbeTime": {
      "$ref": "#/definitions/v1.Time"
     },
     "lastTransitionTime": {
      "$ref": "#/definitions/v1.Time"
     },
     "message": {
      "type": "string"
     },
     "reason": {
      "type": "string"
     },
     "status": {
      "type": "string"
     },
     "type": {
      "type": "string"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.Time"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VMReplicaSetSpec": {
   "Schema": {
    "required": [
     "template"
    ],
    "properties": {
     "paused": {
      "description": "Indicates that the replica set is paused.",
      "type": "boolean"
     },
     "replicas": {
      "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
      "type": "integer",
      "format": "int32"
     },
     "selector": {
      "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.",
      "$ref": "#/definitions/v1.LabelSelector"
     },
     "template": {
      "description": "Template describes the pods that will be created.",
      "$ref": "#/definitions/v1.VMTemplateSpec"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector",
    "kubevirt.io/kubevirt/pkg/api/v1.VMTemplateSpec"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VMReplicaSetStatus": {
   "Schema": {
    "properties": {
     "conditions": {
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1.VMReplicaSetCondition"
      }
     },
     "readyReplicas": {
      "description": "The number of ready replicas for this replica set.",
      "type": "integer",
      "format": "int32"
     },
     "replicas": {
      "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
      "type": "integer",
      "format": "int32"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.VMReplicaSetCondition"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VMSelector": {
   "Schema": {
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "description": "Name of the VM to migrate",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VMTemplateSpec": {
   "Schema": {
    "properties": {
     "metadata": {
      "$ref": "#/definitions/v1.ObjectMeta"
     },
     "spec": {
      "description": "VM Spec contains the VM specification.",
      "$ref": "#/definitions/v1.VirtualMachineSpec"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta",
    "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineSpec"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachine": {
   "Schema": {
    "description": "VirtualMachine is *the* VM Definition. It represents a virtual machine in the runtime environment of kubernetes.",
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "$ref": "#/definitions/v1.ObjectMeta"
     },
     "spec": {
      "description": "VM Spec contains the VM specification.",
      "$ref": "#/definitions/v1.VirtualMachineSpec"
     },
     "status": {
      "description": "Status is the high level overview of how the VM is doing. It contains information available to controllers and users.",
      "$ref": "#/definitions/v1.VirtualMachineStatus"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta",
    "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineSpec",
    "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineStatus"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineCondition": {
   "Schema": {
    "required": [
     "type",
     "status"
    ],
    "properties": {
     "lastProbeTime": {
      "$ref": "#/definitions/v1.Time"
     },
     "lastTransitionTime": {
      "$ref": "#/definitions/v1.Time"
     },
     "message": {
      "type": "string"
     },
     "reason": {
      "type": "string"
     },
     "status": {
      "type": "string"
     },
     "type": {
      "type": "string"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.Time"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineList": {
   "Schema": {
    "description": "VirtualMachineList is a list of VirtualMachines",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1.VirtualMachine"
      }
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "$ref": "#/definitions/v1.ListMeta"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta",
    "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachine"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineNetworkInterface": {
   "Schema": {
    "properties": {
     "ipAddress": {
      "description": "IP address of a Virtual Machine interface",
      "type": "string"
     },
     "mac": {
      "description": "Hardware address of a Virtual Machine interface",
      "type": "string"
     }
    }
   },
   "Dependencies": []
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachinePreset": {
   "Schema": {
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "$ref": "#/definitions/v1.ObjectMeta"
     },
     "spec": {
      "description": "VM Spec contains the VM specification.",
      "$ref": "#/definitions/v1.VirtualMachinePresetSpec"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta",
    "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachinePresetSpec"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachinePresetList": {
   "Schema": {
    "description": "VirtualMachinePresetList is a list of VirtualMachinePresets",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1.VirtualMachinePreset"
      }
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "$ref": "#/definitions/v1.ListMeta"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta",
    "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachinePreset"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachinePresetSpec": {
   "Schema": {
    "required": [
     "selector"
    ],
    "properties": {
     "domain": {
      "description": "Domain is the same object type as contained in VirtualMachineSpec",
      "$ref": "#/definitions/v1.DomainSpec"
     },
     "selector": {
      "description": "Selector is a label query over a set of VMs. Required.",
      "$ref": "#/definitions/v1.LabelSelector"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector",
    "kubevirt.io/kubevirt/pkg/api/v1.DomainSpec"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineReplicaSet": {
   "Schema": {
    "description": "VM is *the* VM Definition. It represents a virtual machine in the runtime environment of kubernetes.",
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "$ref": "#/definitions/v1.ObjectMeta"
     },
     "spec": {
      "description": "VM Spec contains the VM specification.",
      "$ref": "#/definitions/v1.VMReplicaSetSpec"
     },
     "status": {
      "description": "Status is the high level overview of how the VM is doing. It contains information available to controllers and users.",
      "$ref": "#/definitions/v1.VMReplicaSetStatus"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta",
    "kubevirt.io/kubevirt/pkg/api/v1.VMReplicaSetSpec",
    "kubevirt.io/kubevirt/pkg/api/v1.VMReplicaSetStatus"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineReplicaSetList": {
   "Schema": {
    "description": "VMList is a list of VMs",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1.VirtualMachineReplicaSet"
      }
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "$ref": "#/definitions/v1.ListMeta"
     }
    }
   },
   "Dependencies": [
    "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta",
    "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineReplicaSet"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineSpec": {
   "Schema": {
    "description": "VirtualMachineSpec is a description of a VirtualMachine.",
    "required": [
     "domain"
    ],
    "properties": {
     "affinity": {
      "description": "If affinity is specifies, obey all the affinity rules",
      "$ref": "#/definitions/v1.Affinity"
     },
     "domain": {
      "description": "Specification of the desired behavior of the VirtualMachine on the host.",
      "$ref": "#/definitions/v1.DomainSpec"
     },
     "nodeSelector": {
      "description": "NodeSelector is a selector which must be true for the vm to fit on a node. Selector which must match a node's labels for the vm to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
      "type": "object",
      "additionalProperties": {
       "type": "string"
      }
     },
     "terminationGracePeriodSeconds": {
      "description": "Grace period observed after signalling a VM to stop after which the VM is force terminated.",
      "type": "integer",
      "format": "int64"
     },
     "volumes": {
      "description": "List of volumes that can be mounted by disks belonging to the vm.",
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1.Volume"
      }
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.Affinity",
    "kubevirt.io/kubevirt/pkg/api/v1.DomainSpec",
    "kubevirt.io/kubevirt/pkg/api/v1.Volume"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineStatus": {
   "Schema": {
    "description": "VirtualMachineStatus represents information about the status of a VM. Status may trail the actual state of a system.",
    "properties": {
     "conditions": {
      "description": "Conditions are specific points in VM's pod runtime.",
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1.VirtualMachineCondition"
      }
     },
     "interfaces": {
      "description": "Interfaces represent the details of available network interfaces.",
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1.VirtualMachineNetworkInterface"
      }
     },
     "nodeName": {
      "description": "NodeName is the name where the VM is currently running.",
      "type": "string"
     },
     "phase": {
      "description": "Phase is the status of the VM in kubernetes world. It is not the VM status, but partially correlates to it.",
      "type": "string"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineCondition",
    "kubevirt.io/kubevirt/pkg/api/v1.VirtualMachineNetworkInterface"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.Volume": {
   "Schema": {
    "description": "Volume represents a named volume in a vm.",
    "required": [
     "name"
    ],
    "properties": {
     "cloudInitNoCloud": {
      "description": "CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vm. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html",
      "$ref": "#/definitions/v1.CloudInitNoCloudSource"
     },
     "ephemeral": {
      "description": "Ephemeral is a special volume source that \"wraps\" specified source and provides copy-on-write image on top of it.",
      "$ref": "#/definitions/v1.EphemeralVolumeSource"
     },
     "name": {
      "description": "Volume's name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
      "type": "string"
     },
     "persistentVolumeClaim": {
      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vm via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
      "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
     },
     "registryDisk": {
      "description": "RegistryDisk references a docker image, embedding a qcow or raw disk More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html",
      "$ref": "#/definitions/v1.RegistryDiskSource"
     }
    }
   },
   "Dependencies": [
    "k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource",
    "kubevirt.io/kubevirt/pkg/api/v1.CloudInitNoCloudSource",
    "kubevirt.io/kubevirt/pkg/api/v1.EphemeralVolumeSource",
    "kubevirt.io/kubevirt/pkg/api/v1.RegistryDiskSource"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.VolumeSource": {
   "Schema": {
    "description": "Represents the source of a volume to mount. Only one of its members may be specified.",
    "properties": {
     "cloudInitNoCloud": {
      "description": "CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vm. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html",
      "$ref": "#/definitions/v1.CloudInitNoCloudSource"
     },
     "ephemeral": {
      "description": "Ephemeral is a special volume source that \"wraps\" specified source and provides copy-on-write image on top of it.",
      "$ref": "#/definitions/v1.EphemeralVolumeSource"
     },
     "persistentVolumeClaim": {
      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vm via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
      "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
     },
     "registryDisk": {
      "description": "RegistryDisk references a docker image, embedding a qcow or raw disk More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html",
      "$ref": "#/definitions/v1.RegistryDiskSource"
     }
    }
   },
   "Dependencies": [
    "k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource",
    "kubevirt.io/kubevirt/pkg/api/v1.CloudInitNoCloudSource",
    "kubevirt.io/kubevirt/pkg/api/v1.EphemeralVolumeSource",
    "kubevirt.io/kubevirt/pkg/api/v1.RegistryDiskSource"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.Watchdog": {
   "Schema": {
    "description": "Named watchdog device",
    "required": [
     "name"
    ],
    "properties": {
     "i6300esb": {
      "description": "i6300esb watchdog device",
      "$ref": "#/definitions/v1.I6300ESBWatchdog"
     },
     "name": {
      "description": "Name of the watchdog",
      "type": "string"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.I6300ESBWatchdog"
   ]
  },
  "kubevirt.io/kubevirt/pkg/api/v1.WatchdogDevice": {
   "Schema": {
    "description": "Hardware watchdog device Exactly one of its members must be set.",
    "properties": {
     "i6300esb": {
      "description": "i6300esb watchdog device",
      "$ref": "#/definitions/v1.I6300ESBWatchdog"
     }
    }
   },
   "Dependencies": [
    "kubevirt.io/kubevirt/pkg/api/v1.I6300ESBWatchdog"
   ]
  }
 }